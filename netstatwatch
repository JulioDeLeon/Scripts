#!/usr/bin/perl -w
#added
use strict;
use warnings;

package ConnTrackInfo;
use Carp;

sub new {
	my $class = shift;
	my $self = {@_};
	croak "bad args" unless 
		defined $self->{name} and
		defined $self->{conncount} and
		defined $self->{connections};
	return bless $self, $class;
}

sub name {
	my $self = shift;
	return $self->{name};
}

sub printInfo {
	my $self = shift;
	print "$self->{name}\t$self->{conncount}";
}

package MAIN;
use Socket;
my $DEBUG = 0;

my %conntrack;


sub cleanup{
	my @temps = "capture.tmp";
	unlink @temps;
}

sub isValidIP {
# 	will check for both ipv6 or ipv4
#	first ipv4
#	now ipv6
}

sub parseLine{
	my $line = $_;
#	my @toks = split(' ', $line);
#	print "Proto:$toks[0]\n";
#	print "Recv-Q:$toks[1]\n";
#	print "Send-Q:$toks[2]\n";
#	print "LocalAddress:$toks[3]\n";
#	print "ForeignAddres:$toks[4]\n";
#	print "State:$toks[5]\n";
	my($proto, $recvq, $sendq, $localaddr, $foreignaddr, $state) =  split(' ', $line);
#	Add the proper values to the table;
#	my ($client, $port) = split(':', $toks[3]);
	my $client = $localaddr;
	my( $ip, $port) = 0;
	chomp($client);
	$client =~ s/\.lan$//g;
	
	if( $client =~ m/:[0-9]+$/){
		$ip = $`;
		$port = $&;
		chomp($ip);
		chomp($port);
	}else{
		return;
	}
	
	if(defined $conntrack{$ip}){
		my $temp = $conntrack{$ip};
		$temp->{conncount}++;
		push($temp->{connections}, $foreignaddr);
	} else {
		my $newinfo = ConnTrackInfo->new(
			name => $ip, 
			conncount => 1, 
			connections => [$foreignaddr] );
		$conntrack{$ip} = $newinfo;	
	}
}

sub compByConnections {
	$conntrack{$b}->{conncount} <=> $conntrack{$a}->{conncount};
}

sub printConnTrack{
	print "Device" . ("\t" x 6) . "Connections\n";
	my $total = 0;
	foreach my $key (sort compByConnections (keys %conntrack)){
		my $info = $conntrack{$key};
		print "$info->{name}";
		print "\t" x (7- (length($key)/8) );
		
		print "$info->{conncount}\n";

		$total++;
	}
	
	print "list total: $total\n";
}

sub clearConnTrack {
	my ($key, $val);
	while(( $key, $val) = each %conntrack ) {
	  delete $conntrack{$key};
}
}

sub startWrapper {
	&cleanup;
	my $fh;
	system("clear");
	print "Capturing...";
	while(1){
		&clearConnTrack;
		die "Failed to capture" if system("netstat -Wn > /tmp/capture.tmp");
		open $fh, '<', "/tmp/capture.tmp"  or die "Could not open temp file";
		while(<$fh>){
			next if ( !($_ =~ qr/^tcp/) and !($_ =~ qr/^udp/));
			&parseLine($_);
		}
	
	
		system("clear");	
		&printConnTrack;
		close $fh;
		sleep(1);
	}
	&cleanup;

}

sub main {
	&startWrapper;
}

&main;


